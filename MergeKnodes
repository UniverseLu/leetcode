public class MergerK {
	 public ListNode mergeKLists(ListNode[] lists) {
	        if (lists.length == 0) {
	            return null;
	        }
	        
	        while(lists.length > 1){           //至少有两个在lists中
//	            if(lists.length%2 == 0){
//	                ListNode[] new_lists = new ListNode[lists.length/2];
//	            } else {
//	                ListNode[] new_lists = new ListNode[lists.length/2+1];
//	            }
	        	
	        	ListNode[] new_lists = new ListNode[lists.length%2 == 0 ? lists.length/2 : lists.length/2+1];
				
	        	for(int i=0; i+1<= lists.length-1; i+=2){                            //两个两个merge，并加入到新的list中
	                ListNode mergedList = merge(lists[i], lists[i+1]);
	                new_lists[i/2] = mergedList;
	            }
	            
	            if(lists.length%2 ==1){                     //如果原来lists中有奇数个元素，把最后一个单独加入新list中
	                new_lists[new_lists.length-1] = lists[lists.length - 1];
	            }
	            
	            lists = new_lists;          //一轮结束后，把原来lists用新的list代替
	        } 
	        
	        return lists[0];            //最后list中只会有一个元素
	    }
	    
	    //merge two list
	    private ListNode merge(ListNode list1, ListNode list2){
	        ListNode dummy = new ListNode(0);
	        ListNode prev = dummy;
	        while(list1!=null && list2!=null){
	            if(list1.val < list2.val){
	                prev.next = list1;
	                list1 = list1.next;
	            } else{
	                prev.next = list2;
	                list2 = list2.next;
	            }
	            prev = prev.next;
	        }
	        
	        if(list1!= null){
	            prev.next = list1;
	        }
	        
	        if(list2!= null){
	            prev.next = list2;
	        }
	        
	        return dummy.next;
	    }   
}

class ListNode {
	     int val;
	      ListNode next;
	      ListNode(int x) { val = x; }
	  }
